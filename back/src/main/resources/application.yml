spring:
  application:
    name: BE

  datasource:
    url: "${SPRING_DATASOURCE_URL}"
    username: "${SPRING_DATASOURCE_USERNAME}"
    password: "${SPRING_DATASOURCE_PASSWORD}"
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true

  data:
    redis:
      host: redis   # <-- compose 서비스 이름
      port: 6379
      repositories:
        enabled: false
    jpa:
      repositories:
        enabled: true

  mail:
    host: smtp.gmail.com
    port: 587
    username: yunaji0824@gmail.com
    password: zxcdzrfnewtvulcg   # 2단계 인증 켠 뒤 발급
    properties:
        mail:
          smtp:
            auth: true
            starttls.enable: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            client-name: Google
            redirect-uri: "http://localhost:8080/login/oauth2/code/google"


          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "http://localhost:8080/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope: name, email, profile_image, gender, birthday, birthyear
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "http://localhost:8080/login/oauth2/code/kakao"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email, gender, birthday, birthyear
            client-name: Kakao

        provider:

          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
server:
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  port: 8080
  tomcat:
    max-threads: 300
    min-spare-threads: 50

jwt:
  secret: "${JWT_SECRET}"
  expirationMs: 86400000

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    com.springboot.be: DEBUG

bezkoder:
  app:
    jwtSecret: "${JWT_SECRET}"
    jwtExpirationMs: 86400000

google:
  api:
    key: "${GOOGLE_API_KEY}"